<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="browse" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="clipboard_failed" xml:space="preserve">
    <value>Failed to set clipboard content, another program may have control</value>
  </data>
  <data name="context_failed" xml:space="preserve">
    <value>Failed to open context menu for:</value>
  </data>
  <data name="context_menu" xml:space="preserve">
    <value>Open context menu</value>
  </data>
  <data name="copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="copy_ok" xml:space="preserve">
    <value>File/Folder copied to clipboard.</value>
  </data>
  <data name="copy_path" xml:space="preserve">
    <value>Copy path</value>
  </data>
  <data name="copy_path_ok" xml:space="preserve">
    <value>Path copied to clipboard.</value>
  </data>
  <data name="delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="delete_confirm" xml:space="preserve">
    <value>Are you sure you want to delete:</value>
  </data>
  <data name="delete_warn" xml:space="preserve">
    <value>It will be deleted without being sent to recycling bin.
This action will be irreversible.</value>
  </data>
  <data name="everything_not_running" xml:space="preserve">
    <value>Are you sure Everything is running?</value>
  </data>
  <data name="exe" xml:space="preserve">
    <value>Everything exe</value>
  </data>
  <data name="exe_description" xml:space="preserve">
    <value>Location of Everything executable file.
Used for "Show more" option.</value>
  </data>
  <data name="file_not_found" xml:space="preserve">
    <value>File not found</value>
  </data>
  <data name="match_path" xml:space="preserve">
    <value>Match path</value>
  </data>
  <data name="match_path_description" xml:space="preserve">
    <value>Search path in additional to file/folder name.</value>
  </data>
  <data name="max" xml:space="preserve">
    <value>Max</value>
  </data>
  <data name="max_description" xml:space="preserve">
    <value>The maximum amount of results to display in the results.</value>
  </data>
  <data name="noquery" xml:space="preserve">
    <value>Start typing here to search with Everything</value>
  </data>
  <data name="open_console" xml:space="preserve">
    <value>Open in console</value>
  </data>
  <data name="open_console_exception" xml:space="preserve">
    <value>unable to open console.</value>
  </data>
  <data name="open_exception" xml:space="preserve">
    <value>Unable to open:</value>
  </data>
  <data name="open_file" xml:space="preserve">
    <value>Open file</value>
  </data>
  <data name="open_properties" xml:space="preserve">
    <value>Open properties</value>
  </data>
  <data name="open_with" xml:space="preserve">
    <value>Open with</value>
  </data>
  <data name="prefix" xml:space="preserve">
    <value>Query prefix</value>
  </data>
  <data name="prefix_description" xml:space="preserve">
    <value>Adds prefix to all queries, so that you can always include certain filters/modifiers without typing it every time.
Space is not added automatically between prefix and query.</value>
  </data>
  <data name="regex" xml:space="preserve">
    <value>RegEx</value>
  </data>
  <data name="regex_description" xml:space="preserve">
    <value>Enable regular expression in search.
Recommend using regex: in query instead of enabling this option.</value>
  </data>
  <data name="run_admin" xml:space="preserve">
    <value>Run as admin</value>
  </data>
  <data name="run_admin_exception" xml:space="preserve">
    <value>Unable to execute as admin</value>
  </data>
  <data name="sendto_description" xml:space="preserve">
    <value>Send selected result to the specified program.
Separate program path and argument with comma (,) where $P$ represents the path of the selected result.</value>
  </data>
  <data name="sendto" xml:space="preserve">
    <value>Send to specified</value>
  </data>
  <data name="show_more" xml:space="preserve">
    <value>Show more</value>
  </data>
  <data name="show_more_description" xml:space="preserve">
    <value>Display a result that opens Everything with the current query.</value>
  </data>
  <data name="show_more_subtitle" xml:space="preserve">
    <value>Show query results in Everything main window.</value>
  </data>
  <data name="sort" xml:space="preserve">
    <value>Sort</value>
  </data>
  <data name="sort_description" xml:space="preserve">
    <value>Set result sorting method.</value>
  </data>
  <data name="top_level_subtitle" xml:space="preserve">
    <value>Quickly find files and folders with Everything</value>
  </data>
  <data name="unknown_error" xml:space="preserve">
    <value>Unknown error</value>
  </data>
  <data name="sendto_enable" xml:space="preserve">
    <value>Enable Send to</value>
  </data>
  <data name="sendto_enable_description" xml:space="preserve">
    <value>Set whether the send to option needs to be displayed.</value>
  </data>
  <data name="sendto_failed" xml:space="preserve">
    <value>Failed to send to:</value>
  </data>
  <data name="run_as" xml:space="preserve">
    <value>Run as user</value>
  </data>
  <data name="run_as_exception" xml:space="preserve">
    <value>Unable to execute as user</value>
  </data>
  <data name="run_as_description" xml:space="preserve">
    <value>Enable Run as user</value>
  </data>
  <data name="open_folder" xml:space="preserve">
    <value>Open folder</value>
  </data>
  <data name="filter_path" xml:space="preserve">
    <value>filters.toml</value>
  </data>
  <data name="filter_path_description" xml:space="preserve">
    <value>Folder containing the customized filters.toml.
If filters.toml does not exist in this folder, the default template will be applied.</value>
  </data>
</root>